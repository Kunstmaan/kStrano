#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'highline'
require 'net/http'
require 'net/https'
require 'uri'

HighLine.track_eof = false

DEPLOY_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/deploy.rb"
PRODUCTION_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/production.rb"
STAGING_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/staging.rb"

BUILD_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/build.xml"
PHPCS_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/phpcs.xml"
PHPMD_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/phpmd.xml"
PHPDOX_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/phpdox.xml"
PHPUNIT_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/phpunit.xml.dist"
APPTEST_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/app_test.php"
BEHAT_GIST = "https://raw.github.com/Kunstmaan/kStrano/master/config/behat.yml-dist"

def update_capfile(base, context, force)
  file = File.join(base, "Capfile")

  if !File.exists?("Capfile")
    abort "Make sure the project has been capified or capifonied."
  else
    includestr = "load Gem.find_files('kstrano.rb').last.to_s"
    fcontent = ""
    File.open(file, "r") do |f|
      f.each do |line|
        fcontent << line
        if line.include? includestr
          abort "This project is already kumafied!" unless force
          return
        end
      end
    end

    File.open(file, "w") do |f|
      fcontent.each_line do |line|
        if line.include? "load 'app/config/deploy'"
          f.print includestr + "\r\n"
        end
        f.print line
      end
    end
  end
end

def update_deploy_config(ui, base, context, force)
  
  deploy = File.join(base, "app", "config", "deploy.rb")
  write_deploy = true
  
  if write_deploy
    dirname = File.basename(Dir.getwd)
    deploy_gist = get_plain_secure(DEPLOY_GIST).body
    context["app_name"] ||= ui.ask("What's the name of the application?")
    app_name = context["app_name"]
    deploy_gist.gsub!(/(:application,\s)(\"\")/, '\1' + "\"#{app_name}\"")
    deploy_gist.gsub!(/(:admin_runner,\s)(\"\")/, '\1' + "\"#{app_name}\"")

    newrelic_appname = ui.ask("What's the name of the application in new relic?")
    if !newrelic_appname.nil? && !newrelic_appname.empty?
      deploy_gist.gsub!(/(:newrelic_appname,\s)(\"\")/, '\1' + "\"#{newrelic_appname}\"")
      context["newrelic_appname"] = newrelic_appname
    end

    newrelic_license_key = ui.ask("What's the license key of your newrelic account (can be found under 'Account settings')?")
    if !newrelic_license_key.nil? && !newrelic_license_key.empty?
      deploy_gist.gsub!(/(:newrelic_license_key,\s)(\"\")/, '\1' + "\"#{newrelic_license_key}\"")
      context["newrelic_license_key"] = newrelic_license_key
    end
    
    File.open(deploy, "w") do |f|
      deploy_gist.each_line do |line|
        f.print line
      end
    end
  end
  
  deploy_dir = File.join(base, "app", "config", "deploy")
  Dir.mkdir(deploy_dir) unless File.directory?(deploy_dir)
  
  {
    "production" => PRODUCTION_GIST, 
    "staging" => STAGING_GIST
  }.each do |env, gist|
    file = File.join(deploy_dir, "#{env}.rb")
    write = true

    if File.exists?(file)
      overwrite = ui.ask("The file #{file} already exists, do you want to override it?  ") { |q| q.default = 'n' }
      if !overwrite.match(/^y/)
        write = false
      end
    end

    if write
      gist_body = get_plain_secure(gist).body
      server = ui.ask("On which server is the #{env} environment deployed?")
      if !server.match(/^.*\.kunstmaan\.be$/) && !server.match(/^.*\.kunstmaan\.com$/) 
        server = "#{server}.cloud.kunstmaan.com"
      end

      gist_body.gsub!(/(:domain,\s)(\"\")/, '\1' + "\"#{server}\"")

      File.open(file, "w") do |f|
        gist_body.each_line do |line|
          f.print line
        end
      end
    end
  end
  
end

def update_jenkins_config(ui, base, context, force)
  file = File.join(base, "build.xml")
  write = true

  if File.exists?(file)
    overwrite = ui.ask("The file #{file} already exists, do you want to override it?  ") { |q| q.default = 'n' }
    if !overwrite.match(/^y/)
      write = false
    end
  end

  if write
    gist_body = get_plain_secure(BUILD_GIST).body
    
    context["app_name"] ||= ui.ask("What's the name of the application?")
    app_name = context["app_name"]
    gist_body.gsub!(/(\<project\sname=)(\"\")/, '\1' + "\"#{app_name}\"")
  
    File.open(file, "w") do |f|
      gist_body.each_line do |line|
        f.print line
      end
    end
  end
  
  build_dir = File.join(base, "build")
  web_dir = File.join(base, "web")
  Dir.mkdir(build_dir) unless File.directory?(build_dir)
  Dir.mkdir(web_dir) unless File.directory?(web_dir)
  
  {
    File.join(build_dir, "phpcs.xml") => PHPCS_GIST, 
    File.join(build_dir, "phpmd.xml") => PHPMD_GIST,
    File.join(build_dir, "phpdox.xml") => PHPDOX_GIST,
    File.join(base, "app", "phpunit.xml.dist") => PHPUNIT_GIST,
    File.join(web_dir, "app_test.php") => APPTEST_GIST,
    File.join(base, "behat.yml-dist") => BEHAT_GIST
  }.each do |file, gist|
    write = true
    
    if File.exists?(file)
      overwrite = ui.ask("The file #{file} already exists, do you want to override it?  ") { |q| q.default = 'n' }
      if !overwrite.match(/^y/)
        write = false
      end
    end
    
    if write
      gist_body = get_plain_secure(gist).body
      
      File.open(file, "w") do |f|
        gist_body.each_line do |line|
          f.print line
        end
      end
    end
  end
  
end

def get_plain_secure(url)
  uri = URI.parse url
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = uri.is_a?(URI::HTTPS)
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE if http.use_ssl?
  http.start { |http| http.get(uri.path, {}) }
end

def validate_path
  if ARGV.empty?
    abort "Please specify the directory to kumafy, e.g. `#{File.basename($0)} .'"
  elsif !File.exists?(ARGV.first)
    abort "`#{ARGV.first}' does not exist."
  elsif !File.directory?(ARGV.first)
    abort "`#{ARGV.first}' is not a directory."
  elsif ARGV.length > 1
    abort "Too many arguments; please specify only the directory to kumafy."
  end
end

def update_vendors(base)
    vendors = File.join(base, "bin", "vendors")
    if File.directory?(vendors)
      fcontent = ""
      File.open(vendors, "r") do |f|
        f.each do |line|
          fcontent << line
        end
      end

      File.open(vendors, "w") do |f|
        fcontent.each_line do |line|
          f.print line
          if line.include? "git clone %s %s"
            f.print "            system(sprintf('cd %s && git config core.filemode false', escapeshellarg($installDir)));" + "\r\n"
          end
        end
      end
    end
end

force = false

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end
  
  opts.on("-c", "--config", "Creates the configuration files needed for deployment") do
    validate_path
    ui = HighLine.new
    base = ARGV.shift
    context = Hash.new
    update_deploy_config ui, base, context, force
    exit 0
  end
  
  opts.on("-j", "--jenkins", "Creates the jenkins configuration files for this project") do
    validate_path
    ui = HighLine.new
    base = ARGV.shift
    context = Hash.new
    update_jenkins_config ui, base, context, force
    exit 0
  end
  
  opts.on("-f", "--force", "This will force the kumafying of the project") do
    force = true
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

validate_path

ui = HighLine.new
base = ARGV.shift
context = Hash.new

if force && File.exists?("Capfile")
  File.delete("Capfile")
end

puts "[start] capifony"
%x(capifony .)
puts "[end] capifony"

update_capfile base, context, force
update_deploy_config ui, base, context, force
update_jenkins_config ui, base, context, force
update_vendors base

puts "[done] project kumafied!"